{"version":3,"sources":["index.tsx"],"names":["LINKING_ERROR","Platform","select","ios","default","ComponentName","ArViewerComponent","UIManager","getViewManagerConfig","Error","ArViewerView","Component","constructor","props","Map","state","cameraPermission","OS","nativeRef","_onDataReturned","bind","_onError","componentDidMount","PermissionsAndroid","request","PERMISSIONS","CAMERA","then","granted","RESULTS","GRANTED","setState","nativeEvent","message","event","result","error","requestId","parseInt","promise","_requestMap","get","resolve","reject","delete","console","warn","takeScreenshot","_nextRequestId","requestMap","Promise","set","current","dispatchViewManagerCommand","Commands","reset","rotate","pitch","yaw","roll","rotateModel","render"],"mappings":"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","sourcesContent":["import React, { Component, createRef, RefObject, SyntheticEvent } from 'react';\nimport {\n  requireNativeComponent,\n  UIManager,\n  Platform,\n  ViewStyle,\n  findNodeHandle,\n  HostComponent,\n  PermissionsAndroid,\n} from 'react-native';\n\nconst LINKING_ERROR =\n  `The package 'react-native-ar-viewer' doesn't seem to be linked. Make sure: \\n\\n` +\n  Platform.select({ ios: \"- You have run 'pod install'\\n\", default: '' }) +\n  '- You rebuilt the app after installing the package\\n' +\n  '- You are not using Expo managed workflow\\n';\n\ntype ArEvent = SyntheticEvent<\n  {},\n  {\n    requestId: number | string;\n    result: string;\n    error: string;\n  }\n>;\ntype ArErrorEvent = SyntheticEvent<{}, { message: string }>;\ntype ArStatelessEvent = SyntheticEvent<{}, {}>;\n\ntype ArViewerProps = {\n  model: string;\n  planeOrientation?: 'none' | 'vertical' | 'horizontal' | 'both';\n  allowScale?: boolean;\n  allowRotate?: boolean;\n  allowTranslate?: boolean;\n  lightEstimation?: boolean;\n  manageDepth?: boolean;\n  disableInstructions?: boolean;\n  disableInstantPlacement?: boolean;\n  style?: ViewStyle;\n  ref?: RefObject<HostComponent<ArViewerProps> | (() => never)>;\n  onDataReturned: (e: ArEvent) => void;\n  onError?: (e: ArErrorEvent) => void | undefined;\n  onStarted?: (e: ArStatelessEvent) => void | undefined;\n  onEnded?: (e: ArStatelessEvent) => void | undefined;\n  onModelPlaced?: (e: ArStatelessEvent) => void | undefined;\n  onModelRemoved?: (e: ArStatelessEvent) => void | undefined;\n};\n\ntype UIManagerArViewer = {\n  Commands: {\n    takeScreenshot: number;\n    reset: number;\n    rotateModel: number;\n  };\n};\n\ntype ArViewUIManager = UIManager & {\n  ArViewerView: UIManagerArViewer;\n};\n\ntype ArInnerViewProps = Omit<\n  ArViewerProps,\n  'onDataReturned' | 'ref' | 'onError'\n>;\n\ntype ArInnerViewState = {\n  cameraPermission: boolean;\n};\n\nconst ComponentName = 'ArViewerView';\n\nconst ArViewerComponent =\n  UIManager.getViewManagerConfig(ComponentName) != null\n    ? requireNativeComponent<ArViewerProps>(ComponentName)\n    : () => {\n        throw new Error(LINKING_ERROR);\n      };\n\nexport class ArViewerView extends Component<\n  ArInnerViewProps,\n  ArInnerViewState\n> {\n  // We need to keep track of all running requests, so we store a counter.\n  private _nextRequestId = 1;\n  // We also need to keep track of all the promises we created so we can\n  // resolve them later.\n  private _requestMap = new Map<\n    number,\n    {\n      resolve: (result: string) => void;\n      reject: (result: string) => void;\n    }\n  >();\n  // Add a ref to the native view component\n  private nativeRef: RefObject<HostComponent<ArViewerProps> | (() => never)>;\n\n  constructor(props: ArInnerViewProps) {\n    super(props);\n    this.state = {\n      cameraPermission: Platform.OS !== 'android',\n    };\n    this.nativeRef = createRef<typeof ArViewerComponent>();\n    // bind methods to current context\n    this._onDataReturned = this._onDataReturned.bind(this);\n    this._onError = this._onError.bind(this);\n  }\n\n  componentDidMount() {\n    if (!this.state.cameraPermission) {\n      // asks permissions internally to correct a bug: https://github.com/SceneView/sceneview-android/issues/80\n      PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.CAMERA).then(\n        (granted) => {\n          if (granted === PermissionsAndroid.RESULTS.GRANTED) {\n            this.setState({ cameraPermission: true });\n          } else {\n            this._onError({\n              nativeEvent: { message: 'Cannot start' },\n            } as ArErrorEvent);\n          }\n        }\n      );\n    }\n  }\n\n  _onDataReturned(event: ArEvent) {\n    // We grab the relevant data out of our event.\n    const { result, error } = event.nativeEvent;\n    const requestId = parseInt(event.nativeEvent.requestId as string, 10);\n    // Then we get the promise we saved earlier for the given request ID.\n    const promise = this._requestMap.get(requestId);\n    if (promise) {\n      if (result) {\n        // If it was successful, we resolve the promise.\n        promise.resolve(result);\n      } else {\n        // Otherwise, we reject it.\n        promise.reject(error);\n      }\n      // Finally, we clean up our request map.\n      this._requestMap.delete(requestId);\n    }\n  }\n\n  _onError(event: ArErrorEvent) {\n    // We grab the relevant data out of our event.\n    const { message } = event.nativeEvent;\n    console.warn(message);\n  }\n\n  /**\n   * Takes a full screenshot of the rendered camera\n   * @returns A promise resolving a base64 encoded image\n   */\n  takeScreenshot() {\n    // Grab a new request ID and our request map.\n    let requestId = this._nextRequestId++;\n    let requestMap = this._requestMap;\n\n    // We create a promise here that will be resolved once `_onRequestDone` is\n    // called.\n    let promise = new Promise<string>(function (resolve, reject) {\n      requestMap.set(requestId, { resolve: resolve, reject: reject });\n    });\n\n    // Now just dispatch the command as before, adding the request ID to the\n    // parameters.\n    this.nativeRef.current &&\n      UIManager.dispatchViewManagerCommand(\n        findNodeHandle(this.nativeRef.current as unknown as number),\n        (UIManager as ArViewUIManager)[ComponentName].Commands.takeScreenshot,\n        [requestId]\n      );\n    return promise;\n  }\n\n  /**\n   * Reset the model positionning\n   * @returns void\n   */\n  reset() {\n    this.nativeRef.current &&\n      UIManager.dispatchViewManagerCommand(\n        findNodeHandle(this.nativeRef.current as unknown as number),\n        (UIManager as ArViewUIManager)[ComponentName].Commands.reset,\n        []\n      );\n  }\n\n  /**\n   * Rotate the model\n   * @returns void\n   */\n  rotate(pitch: number, yaw: number, roll: number) {\n    this.nativeRef.current &&\n      UIManager.dispatchViewManagerCommand(\n        findNodeHandle(this.nativeRef.current as unknown as number),\n        (UIManager as ArViewUIManager)[ComponentName].Commands.rotateModel,\n        [pitch, yaw, roll]\n      );\n  }\n\n  render() {\n    return (\n      this.state.cameraPermission && (\n        <ArViewerComponent\n          ref={this.nativeRef}\n          onDataReturned={this._onDataReturned}\n          onError={this._onError}\n          {...this.props}\n        />\n      )\n    );\n  }\n}\n"]}