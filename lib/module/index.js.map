{"version":3,"sources":["index.tsx"],"names":["React","Component","createRef","requireNativeComponent","UIManager","Platform","findNodeHandle","LINKING_ERROR","select","ios","default","ComponentName","ArViewerComponent","getViewManagerConfig","Error","ArViewerView","constructor","props","Map","nativeRef","_onDataReturned","bind","_onError","event","result","error","nativeEvent","requestId","parseInt","promise","_requestMap","get","resolve","reject","delete","message","console","warn","takeScreenshot","_nextRequestId","requestMap","Promise","set","current","dispatchViewManagerCommand","Commands","toString","reset","render"],"mappings":"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","sourcesContent":["import React, { Component, createRef, RefObject, SyntheticEvent } from 'react';\nimport {\n  requireNativeComponent,\n  UIManager,\n  Platform,\n  ViewStyle,\n  findNodeHandle,\n  HostComponent,\n} from 'react-native';\n\nconst LINKING_ERROR =\n  `The package 'react-native-ar-viewer' doesn't seem to be linked. Make sure: \\n\\n` +\n  Platform.select({ ios: \"- You have run 'pod install'\\n\", default: '' }) +\n  '- You rebuilt the app after installing the package\\n' +\n  '- You are not using Expo managed workflow\\n';\n\ntype ArEvent = SyntheticEvent<\n  {},\n  {\n    requestId: number | string;\n    result: string;\n    error: string;\n  }\n>;\ntype ArErrorEvent = SyntheticEvent<{}, { message: string }>;\n\ntype ArViewerProps = {\n  model: string;\n  planeOrientation?: 'none' | 'vertical' | 'horizontal' | 'both';\n  allowScale?: boolean;\n  allowRotate?: boolean;\n  allowTranslate?: boolean;\n  lightEstimation?: boolean;\n  manageDepth?: boolean;\n  disableInstructions?: boolean;\n  disableInstantPlacement?: boolean;\n  style?: ViewStyle;\n  ref?: RefObject<HostComponent<ArViewerProps> | (() => never)>;\n  onDataReturned: (e: ArEvent) => void;\n  onError: (e: ArErrorEvent) => void | undefined;\n};\n\ntype UIManagerArViewer = {\n  Commands: {\n    takeScreenshot: number;\n    reset: number;\n  };\n};\n\ntype ArViewUIManager = UIManager & {\n  ArViewerView: UIManagerArViewer;\n};\n\ntype ArInnerViewProps = Omit<\n  ArViewerProps,\n  'onDataReturned' | 'ref' | 'onError'\n>;\n\nconst ComponentName = 'ArViewerView';\n\nconst ArViewerComponent =\n  UIManager.getViewManagerConfig(ComponentName) != null\n    ? requireNativeComponent<ArViewerProps>(ComponentName)\n    : () => {\n        throw new Error(LINKING_ERROR);\n      };\n\nexport class ArViewerView extends Component<ArInnerViewProps> {\n  // We need to keep track of all running requests, so we store a counter.\n  private _nextRequestId = 1;\n  // We also need to keep track of all the promises we created so we can\n  // resolve them later.\n  private _requestMap = new Map<\n    number,\n    {\n      resolve: (result: string) => void;\n      reject: (result: string) => void;\n    }\n  >();\n  // Add a ref to the native view component\n  private nativeRef: RefObject<HostComponent<ArViewerProps> | (() => never)>;\n\n  constructor(props: ArInnerViewProps) {\n    super(props);\n    this.nativeRef = createRef<typeof ArViewerComponent>();\n    // bind methods to current context\n    this._onDataReturned = this._onDataReturned.bind(this);\n    this._onError = this._onError.bind(this);\n  }\n\n  _onDataReturned(event: ArEvent) {\n    // We grab the relevant data out of our event.\n    const { result, error } = event.nativeEvent;\n    const requestId = parseInt(event.nativeEvent.requestId as string, 10);\n    // Then we get the promise we saved earlier for the given request ID.\n    const promise = this._requestMap.get(requestId);\n    if (promise) {\n      if (result) {\n        // If it was successful, we resolve the promise.\n        promise.resolve(result);\n      } else {\n        // Otherwise, we reject it.\n        promise.reject(error);\n      }\n      // Finally, we clean up our request map.\n      this._requestMap.delete(requestId);\n    }\n  }\n\n  _onError(event: ArErrorEvent) {\n    // We grab the relevant data out of our event.\n    const { message } = event.nativeEvent;\n    console.warn(message);\n  }\n\n  /**\n   * Takes a full screenshot of the rendered camera\n   * @returns A promise resolving a base64 encoded image\n   */\n  takeScreenshot() {\n    // Grab a new request ID and our request map.\n    let requestId = this._nextRequestId++;\n    let requestMap = this._requestMap;\n\n    // We create a promise here that will be resolved once `_onRequestDone` is\n    // called.\n    let promise = new Promise<string>(function (resolve, reject) {\n      requestMap.set(requestId, { resolve: resolve, reject: reject });\n    });\n\n    // Now just dispatch the command as before, adding the request ID to the\n    // parameters.\n    this.nativeRef.current &&\n      UIManager.dispatchViewManagerCommand(\n        findNodeHandle(this.nativeRef.current as unknown as number),\n        (UIManager as ArViewUIManager)[\n          ComponentName\n        ].Commands.takeScreenshot.toString(),\n        [requestId]\n      );\n    return promise;\n  }\n\n  /**\n   * Reset the model positionning\n   * @returns void\n   */\n  reset() {\n    this.nativeRef.current &&\n      UIManager.dispatchViewManagerCommand(\n        findNodeHandle(this.nativeRef.current as unknown as number),\n        (UIManager as ArViewUIManager)[ComponentName].Commands.reset.toString(),\n        []\n      );\n  }\n\n  render() {\n    return (\n      <ArViewerComponent\n        ref={this.nativeRef}\n        onDataReturned={this._onDataReturned}\n        onError={this._onError}\n        {...this.props}\n      />\n    );\n  }\n}\n"]}